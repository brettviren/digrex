#!/usr/bin/env waf
from waflib.Utils import to_list

def options(opt):
    opt.load('compiler_c compiler_cxx')
    opt.load('boost', tooldir='waftools')
    opt.add_option('--cxxflags', default='-O2 -ggdb3')


def configure(cfg):
    cfg.load('compiler_c compiler_cxx')
    cfg.load('protoc_cxx','waftools')
    cfg.load('boost', tooldir='waftools')
    cfg.check(header_name="dlfcn.h", uselib_store='DYNAMO',
              lib=['dl'], mandatory=True)


    #cfg.check_cfg(package='eigen3', uselib_store='EIGEN',
    #              args=['--cflags', '--libs'])
    cfg.check_cfg(package='libzmq', uselib_store='ZMQ',
                  args=['--cflags', '--libs'])
    cfg.check_cfg(package='libczmq', uselib_store='CZMQ',
                  args=['--cflags', '--libs'], use='ZMQ')
    cfg.check_cfg(package='libzyre', uselib_store='ZYRE',
                  args=['--cflags', '--libs'], use='CZMQ')
    cfg.env.CXXFLAGS += ['-std=c++17']
    cfg.env.CXXFLAGS += to_list(cfg.options.cxxflags)
    #cfg.env.CXXFLAGS += ['-g', '-std=c++17']

    #print cfg.env


def build(bld):

    pbs = bld.path.ant_glob("pb/*.proto")
    pb_headers = list()
    for pb in pbs:
        bname = 'pb/' + pb.name.replace('.proto','.pb')
        pb_headers.append(bld.path.find_or_declare(bname+'.h'))

    src = bld.path.ant_glob("src/*.cc")
    apps = bld.path.ant_glob("apps/*.cc")
    tests = bld.path.ant_glob("test/*.cc")

    rpath = bld.env["LIBPATH_CZMQ"] + bld.env["LIBPATH_PROTOBUF"]
    if 'HAVE_ZYRE' in bld.env:
        rpath += bld.env["LIBPATH_ZYRE"]
    rpath += [bld.env["PREFIX"] + '/lib']
    #print (rpath)
    #print (bld.env)

    uses = 'ZYRE CZMQ DYNAMO'.split()

    #bld(features='c cxx', source=pbs)
    bld.shlib(features='c cxx', includes='inc include',
              rpath = rpath,
              source=pbs+src, target='dexnet', use=uses)
    bld.install_files('${PREFIX}/include/dexnet', pb_headers)
    
    uses = ['dexnet'] + uses

    for app in apps:
        bld.program(source=[app],
                    target = app.change_ext(''),
                    includes = 'inc',
                    rpath = rpath,
                    use = uses)

    for tst in tests:           # fixme: turn into unit tests
        bld.program(source=[tst],
                    target = tst.change_ext(''),
                    includes = 'inc .',
                    rpath = rpath,
                    use = uses)
