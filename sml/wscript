#!/usr/bin/env waf
def options(opt):
    opt.load('compiler_c compiler_cxx')
    opt.load('boost', tooldir='waftools')

def configure(cfg):
    cfg.load('compiler_c compiler_cxx')
    cfg.load('boost', tooldir='waftools')

    cfg.check_cfg(package='libzmq', uselib_store='ZMQ',
                  args=['--cflags', '--libs'])
    cfg.check_cfg(package='libczmq', uselib_store='CZMQ',
                  args=['--cflags', '--libs'], use='ZMQ')
#    cfg.check_cfg(package='libzyre', uselib_store='ZYRE',
#                  args=['--cflags', '--libs'])
    cfg.env.CXXFLAGS += ['-O2', '-std=c++14']



def build(bld):

    rpath = [bld.env["PREFIX"] + '/lib'] + bld.env['LIBPATH_ZMQ']

    src = bld.path.ant_glob("src/*.cc")
    apps = bld.path.ant_glob("apps/*.cc")
    tests = bld.path.ant_glob("test/*.cc")

    bld.shlib(features='c cxx', includes='inc include',
              source=src, target='dplayer', use='CZMQ')
    
    for app in apps:
        bld.program(source=[app],
                    target = app.change_ext(''),
                    includes = 'inc',
                    rpath = rpath,
                    use = 'dplayer CZMQ')

    for tst in tests:           # fixme: turn into unit tests
        bld.program(source=[tst],
                    target = tst.change_ext(''),
                    includes = 'inc',
                    rpath = rpath,
                    use = 'dplayer CZMQ')
